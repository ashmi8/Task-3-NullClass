import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import numpy as np
import tensorflow as tf

# Load the trained model
model = tf.keras.models.load_model('animal_classifier_model.h5')

# Function to classify image
def classify_image():
    file_path = filedialog.askopenfilename()
    if file_path:
        try:
            image = Image.open(file_path)
            image = image.resize((224, 224))  # Resize image to match model's expected sizing
            image = np.asarray(image) / 255.0  # Normalize pixel values to [0, 1]
            image = np.expand_dims(image, axis=0)  # Add batch dimension

            prediction = model.predict(image)
            if prediction < 0.5:
                result_label.config(text=f'Prediction: Herbivore (Probability: {prediction[0][0]:.4f})')
            else:
                result_label.config(text=f'Prediction: Carnivore (Probability: {prediction[0][0]:.4f})')

            # Display the image
            img = Image.open(file_path)
            img.thumbnail((250, 250))  # Resize image for display
            img = ImageTk.PhotoImage(img)
            panel.config(image=img)
            panel.image = img  # Keep a reference

        except Exception as e:
            messagebox.showerror("Error", f"Error while classifying image: {str(e)}")

# Create a GUI window
window = tk.Tk()
window.title("Animal Classifier")

# Create a button to classify image
classify_button = tk.Button(window, text="Classify Image", command=classify_image)
classify_button.pack(pady=20)

# Create a panel to display image
panel = tk.Label(window)
panel.pack(padx=10, pady=10)

# Create a label for showing prediction result
result_label = tk.Label(window, text="")
result_label.pack(pady=10)

# Run the GUI
window.mainloop()
